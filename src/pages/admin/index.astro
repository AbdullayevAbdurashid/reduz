---
import AdminLayout from "../../layouts/AdminLayout.astro";
import { pb } from "../../lib/pocketbase";
export const prerender = false;
// Get all posts at build time
const posts = await pb.collection("posts").getList(1, 50, {
  sort: "-created",
});
---

<AdminLayout title="Admin Dashboard">
  <div class="max-w-7xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold text-gray-900">Posts</h1>
      <a
        href="/admin/posts/create"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-edpurple hover:bg-edpurple/90"
      >
        Create New Post
      </a>
    </div>

    <!-- Posts Table -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Title
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Status
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Created
            </th>
            <th
              class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {
            posts.items.map((post) => (
              <tr id={`post-${post.id}`}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    {post.title}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span
                    class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                  ${post.published ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"}`}
                  >
                    {post.published ? "Published" : "Draft"}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(post.created).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end gap-2">
                    <a
                      href={`/admin/posts/edit/${post.id}`}
                      class="text-indigo-600 hover:text-indigo-900"
                    >
                      Edit
                    </a>
                    <button
                      class="text-red-600 hover:text-red-900 delete-post"
                      data-post-id={post.id}
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>

    <!-- Delete Confirmation Modal -->
    <div
      id="deleteModal"
      class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full"
    >
      <div
        class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
      >
        <div class="mt-3 text-center">
          <h3 class="text-lg leading-6 font-medium text-gray-900">
            Delete Post
          </h3>
          <div class="mt-2 px-7 py-3">
            <p class="text-sm text-gray-500">
              Are you sure you want to delete this post? This action cannot be
              undone.
            </p>
          </div>
          <div class="items-center px-4 py-3">
            <button
              id="confirmDelete"
              class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
            >
              Delete
            </button>
            <button
              id="cancelDelete"
              class="ml-2 px-4 py-2 bg-gray-100 text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-400"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { pb } from "../../lib/pocketbase";

  // Redirect if not authenticated

  let postIdToDelete: string | null = null;
  const deleteModal = document.getElementById("deleteModal");
  const confirmDelete = document.getElementById("confirmDelete");
  const cancelDelete = document.getElementById("cancelDelete");

  // Add click handlers to all delete buttons
  document.querySelectorAll(".delete-post").forEach((button) => {
    button.addEventListener("click", (e) => {
      const target = e.target as HTMLButtonElement;
      postIdToDelete = target.dataset.postId || null;
      if (deleteModal) deleteModal.classList.remove("hidden");
    });
  });

  // Handle cancel delete
  cancelDelete?.addEventListener("click", () => {
    if (deleteModal) deleteModal.classList.add("hidden");
    postIdToDelete = null;
  });

  // Handle confirm delete
  confirmDelete?.addEventListener("click", async () => {
    if (!postIdToDelete) return;

    try {
      await pb.collection("posts").delete(postIdToDelete);

      // Remove the post from the UI
      const postRow = document.getElementById(`post-${postIdToDelete}`);
      if (postRow) postRow.remove();

      // Hide modal
      if (deleteModal) deleteModal.classList.add("hidden");

      // Show success message (optional)
      alert("Post deleted successfully");
    } catch (error) {
      console.error("Error deleting post:", error);
      alert("Error deleting post");
    }

    postIdToDelete = null;
  });

  // Close modal when clicking outside
  deleteModal?.addEventListener("click", (e) => {
    if (e.target === deleteModal) {
      deleteModal.classList.add("hidden");
      postIdToDelete = null;
    }
  });
</script>

<style>
  /* Optional: Add some hover effects to the table rows */
  tbody tr:hover {
    background-color: #f9fafb;
  }

  /* Optional: Add transition for the modal */
  #deleteModal {
    transition: opacity 0.2s ease-in-out;
  }
</style>
